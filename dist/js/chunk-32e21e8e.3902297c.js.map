{"version":3,"sources":["webpack:///./src/mds/githubPagesWithVue/pic0.png","webpack:///./src/mds/githubPagesWithVue/article.md","webpack:///./src/mds/githubPagesWithVue/pic1.png","webpack:///./src/mds/githubPagesWithVue/pic3.png"],"names":["module","exports","__webpack_require__","p"],"mappings":"qGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAA,kxCAA0yCC,EAAQ,QAAY,sJAAoKA,EAAQ,QAAY,mQAAiRA,EAAQ,QAAY,iwGCA3xDF,EAAAC,QAAiBC,EAAAC,EAAuB,8CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"js/chunk-32e21e8e.3902297c.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/pic0.bc83ae29.png\";","module.exports = \"<h2 id=\\\"前言\\\">前言</h2>\\n<p>以前学习的时候，偶尔也有整理自己知识体系的时候，然而经过一系列面试后，感觉自己的前端知识体系不完整，许多本应该简单的就能实现的效果自己却弄的很麻烦，或者设计模式上出了一些问题，导致代码块臃肿、难以添加新feature并且难以维护。因此在杨子航的推荐下，决定用Github Pages搭建一个自己的博客，记录自己学习中遇到的问题。希望在将来的学习中，遇到的问题可以总结下来，方便自己查阅。</p>\\n<h2 id=\\\"使用github-pages\\\">使用Github Pages</h2>\\n<p>首先创建一个仓库，用来存放自己的博客项目，根据github官方文档的描述</p>\\n<blockquote>\\n<p><strong>You can configure GitHub Pages to publish your site&#39;s source files from <code>master</code>, <code>gh-pages</code>, or a <code>/docs</code> folder on your <code>master</code> branch for Project Pages and other Pages sites that meet certain criteria.</strong></p>\\n</blockquote>\\n<p>这里出了两种配置网页的方式</p>\\n<h4 id=\\\"1-在你master或者gh-pages分支的项目里，读取根目录的indexhtml文件，将其渲染出来br\\\">1. 在你<code>master</code>或者<code>gh-pages</code>分支的项目里，读取根目录的<code>index.html</code>文件，将其渲染出来<br></h4>\\n<p>官方给出的说法是</p>\\n<blockquote>\\n<p><strong>To select <code>master</code> or <code>gh-pages</code> as your publishing source, you must have the branch present in your repository</strong></p>\\n</blockquote>\\n<blockquote class='warn'>\\n这种情况下，官方只允许访问<code>&lt;username&gt;.github.io</code>这个路径，并且默认访问<code>index.html</code>文件，其他路径均没有配置，只能返回404\\n</blockquote>\\n\\n<p>因此我个人第一次尝试，就是修改<code>Vue.config.js</code>,添加一行<code>indexPath=&#39;../index.html&#39;</code>，这样做打包后的目录如下<br></p>\\n<img src=\\\"\" + require(\"./pic0.png\") + \"\\\" width = \\\"500\\\" alt=\\\"图片名称\\\" align=center style=\\\"display:block\\\" />\\n\\n<p>部署后发现打开后一片空白，原来是资源文件没有正确被引用，打开<code>index.html</code>看一下<br></p>\\n<img src=\\\"\" + require(\"./pic1.png\") + \"\\\" width = \\\"500\\\" alt=\\\"图片名称\\\" align=center style=\\\"display:block\\\" />\\n\\n<p>由于打包后的静态资源全在dist中，因此<code>index.html</code>无法正确引用这些css和script，再次修改<code>Vue.config.js</code>，添加一行<code>publicPath=&#39;./dist&#39;</code>，直接本地打开<code>index.html</code>看下</p>\\n<img src=\\\"\" + require(\"./pic3.png\") + \"\\\" width = \\\"500\\\" alt=\\\"图片名称\\\" align=center style=\\\"display:block\\\" />\\n\\n<p>那么问题解决了吗，部署上git后发现，完全不行，<code>publicPath</code>虽然能将link的引用正确指向dist文件夹，然而<code>publicPath</code>决定着整个项目启动的根路径，它被设置为<code>&#39;./dist&#39;</code>后，项目的访问路径变成了<code>&lt;username&gt;.github.io/dist</code>。</p>\\n<p>因此这里需要改变一下，打开<code>router.ts</code>(如果你们没选ts，就是<code>router.js</code>)，修改路由中的<code>base: process.env.BASE_URL</code>为<code>base:&#39;&#39;</code>，这样做的原因是，publicPath已经被修改为<code>&#39;./dist&#39;</code>，然而GitHubPages支持访问<code>&lt;username&gt;.github.io</code>这个路由，无法访问<code>&lt;username&gt;.github.io/dist</code>这个路由，这样部署的话，完美解决！</p>\\n<p>那么这么做是否没有瑕疵呢？有一点！由于选择的模式是history模式，因此当你跳转到其他路由时，页面没有刷新，动态加载组件，没有问题，然而如果在其他路由手动刷新页面，会提示404页面，这正是由于GitHubPages只支持<code>&lt;username&gt;.github.io</code>这个路由，因此我们将history模式改为hash模式，就完美解决。在<code>router.ts</code>文件中，将<code>mode:&#39;history&#39;</code>去掉即可，这样一来，就部署成功了！</p>\\n<p>最后的<code>Vue.config.js</code>如下</p>\\n<pre><code class=\\\"language-js\\\">module.exports = {\\n\\n    indexPath: &quot;../index.html&quot;,\\n\\n    publicPath: process.env.NODE_ENV == &quot;development&quot; ? &quot;&quot; : &quot;./dist&quot;\\n\\n}</code></pre>\\n<blockquote class='tip'>\\n 由于在本地开发时，base和publicPath不一致，会导致访问错误，因此建议在<code>Vue.config.js</code>和<code>router.ts</code>中，将publicPath和base均改成<code>process.env.NODE_ENV == \\\"development\\\" ? \\\"\\\" : \\\"./dist\\\"</code>，这样在本地和服务器上均能正常运行\\n </blockquote>\\n\\n <blockquote class='tip'>\\n 要在<code>.gitignore</code>里面将dist去掉，不然打包完了也上传不了\\n </blockquote>\\n\\n<h4 id=\\\"2-将你master分支上docs文件夹里的indexhtml渲染出来br\\\">2. 将你<code>master</code>分支上<code>docs</code>文件夹里的<code>index.html</code>渲染出来<br></h4>\\n<p>这种情况，官方给出的说法是</p>\\n<blockquote>\\n<p><strong>To publish your site&#39;s source files from a <code>/docs</code> folder on your <code>master branch</code>, you must have a master branch and your repository must:</strong><br>\\n<strong>1. have a <code>/docs</code> folder in the root of the repository</strong><br>\\n<strong>2. <code>not follow</code> the repository naming scheme <code>&lt;username&gt;.github.io</code> or <code>&lt;orgname&gt;.github.io</code></strong></p>\\n</blockquote>\\n<p>因此这里需要做的是，将你的仓库名更改一下，不要按照<code>&lt;username&gt;.github.io</code>这种模式即可，我选择改成<code>blog</code>，然后按照文档，打开设置，在GithubPages中，选择<code>master branch/docs folder</code>选项，然后我们的打包方式就需要做一个小小的改变，<code>Vue.config.js</code>如下</p>\\n<pre><code class=\\\"language-js\\\">module.exports = {\\n\\n    publicPath: &quot;/blog/&quot;,\\n\\n    outputDir: &#39;./docs&#39;,\\n\\n    assetsDir: &quot;./&quot;,\\n\\n}</code></pre>\\n<blockquote class='tip'>\\n <code>publicPath</code>要与你仓库名一致，因为GithubPages现在给你的路由是<code>&lt;username&gt;.github.io/repository</code>\\n </blockquote>\\n\\n <blockquote class='tip'>\\n <code>outputDir</code>必须是<code>docs</code>，这与官方要求的渲染docs文件中的文件要求一致\\n </blockquote>\\n\\n <blockquote class='tip'>\\n <code>assetsDir</code>选择用<code>\\\"./\\\"</code>，这样能使路径静态资源相对于<code>outputDir</code>\\n </blockquote>\\n\\n<p>然后编译打包，直接上传部署即可，现在博客url变成了<code>&lt;username&gt;.github.io/blog</code></p>\\n<h2 id=\\\"总结\\\">总结</h2>\\n<p>在部署这个Vue应用的时候，遇到了很多问题，例如<code>Vue.config.js</code>中各项配置的意义，<a href=\\\"https://segmentfault.com/q/1010000012829376\\\">如何在vue中嵌入md文件</a>等。</p>\\n<p>部署完这个博客，写了这篇总结，发现自己有很多需要学习的地方，这篇博客不是完结，是学习的开始!</p>\\n<blockquote>\\n<p>Be curious about everything. Never stop learning. Never stop growing.</p>\\n</blockquote>\\n\";","module.exports = __webpack_public_path__ + \"img/pic1.5c7194e9.png\";","module.exports = __webpack_public_path__ + \"img/pic3.4dc04ab4.png\";"],"sourceRoot":""}